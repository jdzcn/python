#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qt/myssh/form.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread,pyqtSignal
import paramiko
import json
import os

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setEditable(True)
        self.comboBox.setObjectName("comboBox")
        self.verticalLayout.addWidget(self.comboBox)
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout.addWidget(self.textEdit)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setIconSize(QtCore.QSize(48, 48))
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)

        self.act_server = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("server.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.act_server.setIcon(icon)
        self.act_server.setObjectName("act_server")

        self.act_Sftp = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("sftp.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.act_Sftp.setIcon(icon1)
        self.act_Sftp.setObjectName("act_Sftp")



        self.act_Go = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("go.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.act_Go.setIcon(icon2)
        self.act_Go.setShortcut(QtGui.QKeySequence("Ctrl+R"))
        self.act_Go.setObjectName("act_Go")

        self.toolBar.addAction(self.act_Go)
        self.toolBar.addAction(self.act_server)
        self.toolBar.addAction(self.act_Sftp)
        

        self.toolBar.actionTriggered[QtWidgets.QAction].connect(self.toolbtnpressed)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



        # self.comboBox.currentTextChanged.connect(self.exec_command)

        names = self.cmd_names()
        self.comboBox.addItems(names)

        with open('config.json') as f:
            try:
                self.server=json.load(f)
            except ValueError as err:
                self.textEdit.setText('server config error!')
            self.update_status()

    def update_status(self):
        self.statusbar.showMessage('Server:'+self.server['server'])

    def toolbtnpressed(self,a):
        if a.text()=='Server':
            text,ok=QtWidgets.QInputDialog.getMultiLineText(None,'Myssh','Your Server',json.dumps(self.server,indent=2))
            if ok and text!='':
                with open('config.json', 'w') as f:
                    f.write(text)
                    self.server=json.loads(text)
                    self.update_status()
        if a.text()=='Sftp':
            sel= QtWidgets.QFileDialog.getOpenFileName(None, '请选择上传文件')
            if sel[0]!='':

                source = sel[0]
                dest = '/var/www/html/'+os.path.basename(source)

                with paramiko.SSHClient() as ssh:

                    ssh.load_system_host_keys()
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    ssh.connect(self.server['server'],port=self.server['port'], username=self.server['user'], password=self.server['pass'])
                    with ssh.open_sftp() as sftp:
                        sftp.put(source, dest)

        if a.text()=='Go':
            self.thread=Worker(None,self.comboBox.currentText(),self.server)
            self.thread.sinOut.connect(self.slotAdd)
            self.thread.start()

    def slotAdd(self,str):

        self.textEdit.setText(str)


    def cmd_names(self):
        with open('history') as reader:
            return reader.readlines()

    # def exec_command(self,str):
    #     if str!='':
    #         self.thread=Worker(None,str)
    #         self.thread.sinOut.connect(self.slotAdd)
    #         self.thread.start()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Myssh"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.act_server.setText(_translate("MainWindow", "Server"))
        self.act_Sftp.setText(_translate("MainWindow", "Sftp"))
        self.act_Go.setText(_translate("MainWindow", "Go"))

class Worker(QThread):
    sinOut = pyqtSignal(str)

    def __init__(self,parent=None,str='',server=''):
        super(Worker,self).__init__(parent)
        self.str=str
        self.server=server
    def run(self):
        self.sinOut.emit('Running...')
        with paramiko.SSHClient() as ssh:
            ssh.load_system_host_keys()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(self.server['server'],port=self.server['port'], username=self.server['user'], password=self.server['pass'])
            stdin, stdout,stderr = ssh.exec_command(self.str)
            self.sinOut.emit(stdout.read().decode('utf-8'))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
